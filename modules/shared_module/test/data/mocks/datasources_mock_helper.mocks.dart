// Mocks generated by Mockito 5.4.5 from annotations
// in shared_module/test/data/mocks/datasources_mock_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:auth_module/data/models/user_model.dart' as _i4;
import 'package:home_module/data/models/stored_qr_model.dart' as _i6;
import 'package:home_module/domain/entities/qr_scann_entity.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:seek_secure_store/src/storage.dart' as _i7;
import 'package:shared_module/features/storage/data/datasources/seek_storage_datasource.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SeekStorageDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeekStorageDatasource extends _i1.Mock
    implements _i2.SeekStorageDatasource {
  MockSeekStorageDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> putUser({required _i4.UserModel? recentUserLocal}) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUser,
          [],
          {#recentUserLocal: recentUserLocal},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<_i4.UserModel?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i3.Future<_i4.UserModel?>.value(),
      ) as _i3.Future<_i4.UserModel?>);

  @override
  _i3.Future<void> saveQrScan(_i5.QrScan? qrScan) => (super.noSuchMethod(
        Invocation.method(
          #saveQrScan,
          [qrScan],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i6.StoredQr>> getQrScanHistory() => (super.noSuchMethod(
        Invocation.method(
          #getQrScanHistory,
          [],
        ),
        returnValue: _i3.Future<List<_i6.StoredQr>>.value(<_i6.StoredQr>[]),
      ) as _i3.Future<List<_i6.StoredQr>>);

  @override
  _i3.Future<void> clearQrHistory() => (super.noSuchMethod(
        Invocation.method(
          #clearQrHistory,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [SeekStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSeekStorage extends _i1.Mock implements _i7.SeekStorage {
  MockSeekStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> write({
    required String? key,
    required String? value,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> read({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {#key: key},
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<void> delete({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#key: key},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
