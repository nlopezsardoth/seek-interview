// Mocks generated by Mockito 5.4.5 from annotations
// in auth_module/test/presentation/mocks/presentation_mock_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:auth_module/l10n/auth_localizations.dart' as _i5;
import 'package:auth_module/presentation/blocs/auth/auth_bloc.dart' as _i2;
import 'package:bloc/bloc.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:shared_module/ui_utils/overlay/error_bottom_sheet_model.dart'
    as _i4;
import 'package:shared_module/ui_utils/overlay/loading_status_model.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthState_0 extends _i1.SmartFake implements _i2.AuthState {
  _FakeAuthState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadingStatusCubit_1 extends _i1.SmartFake
    implements _i3.LoadingStatusCubit {
  _FakeLoadingStatusCubit_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeErrorBottomSheetCubit_2 extends _i1.SmartFake
    implements _i4.ErrorBottomSheetCubit {
  _FakeErrorBottomSheetCubit_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthLocalizations].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthLocalizations extends _i1.Mock implements _i5.AuthLocalizations {
  MockAuthLocalizations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get localeName => (super.noSuchMethod(
        Invocation.getter(#localeName),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#localeName),
        ),
      ) as String);

  @override
  String get login_validate_your_identity_title => (super.noSuchMethod(
        Invocation.getter(#login_validate_your_identity_title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#login_validate_your_identity_title),
        ),
      ) as String);

  @override
  String get login_continue => (super.noSuchMethod(
        Invocation.getter(#login_continue),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#login_continue),
        ),
      ) as String);

  @override
  String get login_keyboard_done_button => (super.noSuchMethod(
        Invocation.getter(#login_keyboard_done_button),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#login_keyboard_done_button),
        ),
      ) as String);

  @override
  String get login_invalid_pin => (super.noSuchMethod(
        Invocation.getter(#login_invalid_pin),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#login_invalid_pin),
        ),
      ) as String);

  @override
  String get login_new_pin_title => (super.noSuchMethod(
        Invocation.getter(#login_new_pin_title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#login_new_pin_title),
        ),
      ) as String);

  @override
  String get login_new_pin_sub_title => (super.noSuchMethod(
        Invocation.getter(#login_new_pin_sub_title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#login_new_pin_sub_title),
        ),
      ) as String);

  @override
  String get login_pin_auth_title => (super.noSuchMethod(
        Invocation.getter(#login_pin_auth_title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#login_pin_auth_title),
        ),
      ) as String);

  @override
  String get login_confirm_pin_dont_match_message => (super.noSuchMethod(
        Invocation.getter(#login_confirm_pin_dont_match_message),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#login_confirm_pin_dont_match_message),
        ),
      ) as String);

  @override
  String get login_try_with_pin_button_label => (super.noSuchMethod(
        Invocation.getter(#login_try_with_pin_button_label),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#login_try_with_pin_button_label),
        ),
      ) as String);

  @override
  String get biometric_auth_reason_ios => (super.noSuchMethod(
        Invocation.getter(#biometric_auth_reason_ios),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#biometric_auth_reason_ios),
        ),
      ) as String);

  @override
  String get biometric_auth_reason_android => (super.noSuchMethod(
        Invocation.getter(#biometric_auth_reason_android),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#biometric_auth_reason_android),
        ),
      ) as String);

  @override
  String get biometric_log_in_text => (super.noSuchMethod(
        Invocation.getter(#biometric_log_in_text),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#biometric_log_in_text),
        ),
      ) as String);

  @override
  String get biometric_auth_android_sign_in_title => (super.noSuchMethod(
        Invocation.getter(#biometric_auth_android_sign_in_title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#biometric_auth_android_sign_in_title),
        ),
      ) as String);

  @override
  String get biometric_auth_try_again_button_label => (super.noSuchMethod(
        Invocation.getter(#biometric_auth_try_again_button_label),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#biometric_auth_try_again_button_label),
        ),
      ) as String);

  @override
  String get biometric_auth_android_biometric_hint => (super.noSuchMethod(
        Invocation.getter(#biometric_auth_android_biometric_hint),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#biometric_auth_android_biometric_hint),
        ),
      ) as String);

  @override
  String get error_biometric_modal_error_title => (super.noSuchMethod(
        Invocation.getter(#error_biometric_modal_error_title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#error_biometric_modal_error_title),
        ),
      ) as String);

  @override
  String get error_biometric_modal_error_description => (super.noSuchMethod(
        Invocation.getter(#error_biometric_modal_error_description),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#error_biometric_modal_error_description),
        ),
      ) as String);

  @override
  String get error_biometric_modal_updated_title => (super.noSuchMethod(
        Invocation.getter(#error_biometric_modal_updated_title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#error_biometric_modal_updated_title),
        ),
      ) as String);

  @override
  String get error_biometric_modal_updated_description => (super.noSuchMethod(
        Invocation.getter(#error_biometric_modal_updated_description),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#error_biometric_modal_updated_description),
        ),
      ) as String);

  @override
  String get error_biometric_modal_info_description => (super.noSuchMethod(
        Invocation.getter(#error_biometric_modal_info_description),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#error_biometric_modal_info_description),
        ),
      ) as String);

  @override
  String get error_biometric_modal_info_title => (super.noSuchMethod(
        Invocation.getter(#error_biometric_modal_info_title),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#error_biometric_modal_info_title),
        ),
      ) as String);
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i2.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.AuthState);

  @override
  _i7.Stream<_i2.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i7.Stream<_i2.AuthState>.empty(),
      ) as _i7.Stream<_i2.AuthState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i3.LoadingStatusCubit get loadingStatus => (super.noSuchMethod(
        Invocation.getter(#loadingStatus),
        returnValue: _FakeLoadingStatusCubit_1(
          this,
          Invocation.getter(#loadingStatus),
        ),
      ) as _i3.LoadingStatusCubit);

  @override
  _i4.ErrorBottomSheetCubit get errorBottomSheetStatus => (super.noSuchMethod(
        Invocation.getter(#errorBottomSheetStatus),
        returnValue: _FakeErrorBottomSheetCubit_2(
          this,
          Invocation.getter(#errorBottomSheetStatus),
        ),
      ) as _i4.ErrorBottomSheetCubit);

  @override
  void add(_i2.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i2.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i2.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i2.AuthEvent>(
    _i8.EventHandler<E, _i2.AuthState>? handler, {
    _i8.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i8.Transition<_i2.AuthEvent, _i2.AuthState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void onChange(_i8.Change<_i2.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
