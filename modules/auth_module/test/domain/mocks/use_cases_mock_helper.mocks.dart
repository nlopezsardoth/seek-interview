// Mocks generated by Mockito 5.4.5 from annotations
// in auth_module/test/domain/mocks/use_cases_mock_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:auth_module/domain/entities/biometric_auth_parameters.dart'
    as _i8;
import 'package:auth_module/domain/entities/biometric_auth_response.dart'
    as _i7;
import 'package:auth_module/domain/entities/user.dart' as _i11;
import 'package:auth_module/domain/repositories/biometric_auth_repository.dart'
    as _i2;
import 'package:auth_module/domain/usecases/biometric_auth_use_case.dart'
    as _i4;
import 'package:auth_module/domain/usecases/check_biometric_use_case.dart'
    as _i9;
import 'package:auth_module/domain/usecases/get_user_use_case.dart' as _i10;
import 'package:auth_module/domain/usecases/log_in_use_case.dart' as _i12;
import 'package:auth_module/domain/usecases/set_new_pin_use_case.dart' as _i13;
import 'package:auth_module/domain/usecases/validate_pin_use_case.dart' as _i14;
import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_module/errors/failures.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBiometricAuthRepository_0 extends _i1.SmartFake
    implements _i2.BiometricAuthRepository {
  _FakeBiometricAuthRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BiometricAuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometricAuthUseCase extends _i1.Mock
    implements _i4.BiometricAuthUseCase {
  MockBiometricAuthUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BiometricAuthRepository get biometricAuthRepository =>
      (super.noSuchMethod(
        Invocation.getter(#biometricAuthRepository),
        returnValue: _FakeBiometricAuthRepository_0(
          this,
          Invocation.getter(#biometricAuthRepository),
        ),
      ) as _i2.BiometricAuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.BioAuthResult>> call(
          _i8.BiometricAuthParams? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i7.BioAuthResult>>.value(
                _FakeEither_1<_i6.Failure, _i7.BioAuthResult>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i7.BioAuthResult>>);
}

/// A class which mocks [CheckBiometricUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckBiometricUseCase extends _i1.Mock
    implements _i9.CheckBiometricUseCase {
  MockCheckBiometricUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BiometricAuthRepository get biometricRepository => (super.noSuchMethod(
        Invocation.getter(#biometricRepository),
        returnValue: _FakeBiometricAuthRepository_0(
          this,
          Invocation.getter(#biometricRepository),
        ),
      ) as _i2.BiometricAuthRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(dynamic input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [GetUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserUseCase extends _i1.Mock implements _i10.GetUserUseCase {
  MockGetUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i11.User?>> call(dynamic input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, _i11.User?>>.value(
            _FakeEither_1<_i6.Failure, _i11.User?>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i11.User?>>);
}

/// A class which mocks [LogInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogInUseCase extends _i1.Mock implements _i12.LogInUseCase {
  MockLogInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i11.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [user],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [user],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [SetNewPinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSetNewPinUseCase extends _i1.Mock implements _i13.SetNewPinUseCase {
  MockSetNewPinUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(String? newPin) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [newPin],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [newPin],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [ValidatePinUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockValidatePinUseCase extends _i1.Mock
    implements _i14.ValidatePinUseCase {
  MockValidatePinUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(String? pin) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [pin],
        ),
        returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
            _FakeEither_1<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [pin],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}
