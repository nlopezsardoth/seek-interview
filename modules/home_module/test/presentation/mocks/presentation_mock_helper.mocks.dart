// Mocks generated by Mockito 5.4.5 from annotations
// in home_module/test/presentation/mocks/presentation_mock_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:bloc/bloc.dart' as _i13;
import 'package:dartz/dartz.dart' as _i3;
import 'package:home_module/domain/entities/qr_scann_entity.dart' as _i11;
import 'package:home_module/domain/repositories/qr_history_repository.dart'
    as _i4;
import 'package:home_module/domain/repositories/qr_scanner_repository.dart'
    as _i2;
import 'package:home_module/domain/use_cases/usecases.dart' as _i8;
import 'package:home_module/presentation/blocs/qr/qr_bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_module/entities/no_parameters.dart' as _i12;
import 'package:shared_module/errors/failures.dart' as _i10;
import 'package:shared_module/ui_utils/overlay/error_bottom_sheet_model.dart'
    as _i7;
import 'package:shared_module/ui_utils/overlay/loading_status_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeQrScannerRepository_0 extends _i1.SmartFake
    implements _i2.QrScannerRepository {
  _FakeQrScannerRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQrHistoryRepository_2 extends _i1.SmartFake
    implements _i4.QrHistoryRepository {
  _FakeQrHistoryRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQrState_3 extends _i1.SmartFake implements _i5.QrState {
  _FakeQrState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLoadingStatusCubit_4 extends _i1.SmartFake
    implements _i6.LoadingStatusCubit {
  _FakeLoadingStatusCubit_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeErrorBottomSheetCubit_5 extends _i1.SmartFake
    implements _i7.ErrorBottomSheetCubit {
  _FakeErrorBottomSheetCubit_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ScanQrUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockScanQrUseCase extends _i1.Mock implements _i8.ScanQrUseCase {
  MockScanQrUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.QrScannerRepository get qrScannerRepository => (super.noSuchMethod(
        Invocation.getter(#qrScannerRepository),
        returnValue: _FakeQrScannerRepository_0(
          this,
          Invocation.getter(#qrScannerRepository),
        ),
      ) as _i2.QrScannerRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, _i11.QrScan>> call(
          _i12.NoParams? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, _i11.QrScan>>.value(
            _FakeEither_1<_i10.Failure, _i11.QrScan>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, _i11.QrScan>>);
}

/// A class which mocks [GetQrHistoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetQrHistoryUseCase extends _i1.Mock
    implements _i8.GetQrHistoryUseCase {
  MockGetQrHistoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.QrHistoryRepository get qrHistoryRepository => (super.noSuchMethod(
        Invocation.getter(#qrHistoryRepository),
        returnValue: _FakeQrHistoryRepository_2(
          this,
          Invocation.getter(#qrHistoryRepository),
        ),
      ) as _i4.QrHistoryRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, List<_i11.QrScan>>> call(
          _i12.NoParams? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue:
            _i9.Future<_i3.Either<_i10.Failure, List<_i11.QrScan>>>.value(
                _FakeEither_1<_i10.Failure, List<_i11.QrScan>>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, List<_i11.QrScan>>>);
}

/// A class which mocks [SaveQrHistoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveQrHistoryUseCase extends _i1.Mock
    implements _i8.SaveQrHistoryUseCase {
  MockSaveQrHistoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.QrHistoryRepository get qrHistoryRepository => (super.noSuchMethod(
        Invocation.getter(#qrHistoryRepository),
        returnValue: _FakeQrHistoryRepository_2(
          this,
          Invocation.getter(#qrHistoryRepository),
        ),
      ) as _i4.QrHistoryRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, _i12.NoParams>> call(
          _i11.QrScan? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, _i12.NoParams>>.value(
            _FakeEither_1<_i10.Failure, _i12.NoParams>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, _i12.NoParams>>);
}

/// A class which mocks [ClearQrHistoryUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockClearQrHistoryUseCase extends _i1.Mock
    implements _i8.ClearQrHistoryUseCase {
  MockClearQrHistoryUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.QrHistoryRepository get qrHistoryRepository => (super.noSuchMethod(
        Invocation.getter(#qrHistoryRepository),
        returnValue: _FakeQrHistoryRepository_2(
          this,
          Invocation.getter(#qrHistoryRepository),
        ),
      ) as _i4.QrHistoryRepository);

  @override
  _i9.Future<_i3.Either<_i10.Failure, _i12.NoParams>> call(
          _i12.NoParams? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [input],
        ),
        returnValue: _i9.Future<_i3.Either<_i10.Failure, _i12.NoParams>>.value(
            _FakeEither_1<_i10.Failure, _i12.NoParams>(
          this,
          Invocation.method(
            #call,
            [input],
          ),
        )),
      ) as _i9.Future<_i3.Either<_i10.Failure, _i12.NoParams>>);
}

/// A class which mocks [QrBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockQrBloc extends _i1.Mock implements _i5.QrBloc {
  MockQrBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.QrState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeQrState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.QrState);

  @override
  _i9.Stream<_i5.QrState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i5.QrState>.empty(),
      ) as _i9.Stream<_i5.QrState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i6.LoadingStatusCubit get loadingStatus => (super.noSuchMethod(
        Invocation.getter(#loadingStatus),
        returnValue: _FakeLoadingStatusCubit_4(
          this,
          Invocation.getter(#loadingStatus),
        ),
      ) as _i6.LoadingStatusCubit);

  @override
  _i7.ErrorBottomSheetCubit get errorBottomSheetStatus => (super.noSuchMethod(
        Invocation.getter(#errorBottomSheetStatus),
        returnValue: _FakeErrorBottomSheetCubit_5(
          this,
          Invocation.getter(#errorBottomSheetStatus),
        ),
      ) as _i7.ErrorBottomSheetCubit);

  @override
  void add(_i5.QrEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i5.QrEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.QrState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i5.QrEvent>(
    _i13.EventHandler<E, _i5.QrState>? handler, {
    _i13.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(_i13.Transition<_i5.QrEvent, _i5.QrState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void onChange(_i13.Change<_i5.QrState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
